using Unity.PlasticSCM.Editor.WebApi;
using UnityEngine;
using UnityEngine.UI;

public class GameLogic : MonoBehaviour
{
    //these two are the lower and upper limit generated by the algorithm
    private int lowerNumRange = 1; //inclusive
    private int upperNumRange = 6; //exclusive

    public string currentOperation;

    [SerializeField] TMPro.TextMeshProUGUI questionText;

    public static GameLogic instance;

    void Awake()
    {
        instance = this;
    }

    //we generate the question
    public void GenerateQuestion()
    {
        string a = GenerateArithmaticExpression();
        string b = GenerateArithmaticExpression();
        currentOperation = GetRandomOperation();

        float correctAnswer = CalculateAnswer(EvaluateExpression(a), EvaluateExpression(b), currentOperation);

        questionText.text = $"{a}  <sprite name= \"Smiley_22\">  {b} = {correctAnswer}";
    }

    private string GetRandomOperation()
    {
        string[] operations = { "+", "-", "*", "/" };
        return operations[Random.Range(0, operations.Length)];
    }

    private string GenerateArithmaticExpression()
    {
        int option = Random.Range(1, 6);

        switch (option)
        {
            case 1:
                // Random number
                return $" {Random.Range(lowerNumRange, upperNumRange)} ";
            case 2:
                // Random expression like (2 + 3)
                return $"({Random.Range(lowerNumRange, upperNumRange)} + {Random.Range(1, 10)})";
            case 3:
                // Random expression like (2 * 3)
                return $"({Random.Range(lowerNumRange, upperNumRange)} * {Random.Range(1, 10)})";
            case 4:
                // Random expression like (2 - 3)
                return $"({Random.Range(lowerNumRange, upperNumRange)} - {Random.Range(1, 10)})";
            case 5:
                // Random expression like (2 / 3)
                return $"({Random.Range(lowerNumRange, upperNumRange)} / {Random.Range(1, 10)})";
            default:
                return "0";
        }
    }
    
    private float EvaluateExpression(string expression)
    {
        // Evaluate simple arithmetic expressions
        return float.Parse(new System.Data.DataTable().Compute(expression, "").ToString());
    }

    private float CalculateAnswer(float a, float b, string operation)
    {
        switch (operation)
        {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                return a / b;
            default:
                return 0f;
        }
    }
}
